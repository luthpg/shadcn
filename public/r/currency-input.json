{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "currency-input",
  "type": "registry:component",
  "title": "Currency Input",
  "description": "A currency input component",
  "files": [
    {
      "path": "registry/currency-input/currency-input.tsx",
      "content": "'use client';\nimport { useState } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport const parseCurrencyValue = (value: string | number) => {\n  const digits = String(value).replace(/\\D/g, '');\n  return Number(digits);\n};\n\nexport const formatCurrencyValue = (value: string | number) => {\n  const moneyFormatter = new Intl.NumberFormat('ja-JP', {\n    currency: 'JPY',\n    style: 'currency',\n  });\n  const numberValue = parseCurrencyValue(value);\n  return moneyFormatter.format(numberValue);\n};\n\nexport function CurrencyInput({\n  className,\n  defaultValue,\n  onChange,\n  ...props\n}: React.ComponentProps<'input'>) {\n  const [isComposing, setIsComposing] = useState(false);\n  const [value, setValue] = useState(() =>\n    formatCurrencyValue(defaultValue ? String(defaultValue) : '0'),\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isComposing) {\n      const formattedValue = formatCurrencyValue(e.target.value);\n      setValue(formattedValue);\n      e.target.value = String(parseCurrencyValue(formattedValue));\n      onChange?.(e);\n    } else {\n      setValue(e.target.value);\n    }\n  };\n\n  return (\n    <input\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n      type=\"text\"\n      inputMode=\"numeric\"\n      value={value}\n      onChange={handleChange}\n      onCompositionStart={() => setIsComposing(true)}\n      onCompositionEnd={(e: React.CompositionEvent<HTMLInputElement>) => {\n        setIsComposing(false);\n        // 変換確定後にフォーマット\n        const formattedValue = formatCurrencyValue(\n          (e.target as HTMLInputElement).value,\n        );\n        setValue(formattedValue);\n        // react-hook-formに数値を渡すための処理\n        const event = {\n          target: { value: String(parseCurrencyValue(formattedValue)) },\n        } as React.ChangeEvent<HTMLInputElement>;\n        onChange?.(event);\n      }}\n    />\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}