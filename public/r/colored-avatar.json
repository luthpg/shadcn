{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "colored-avatar",
  "type": "registry:component",
  "title": "Colored Avatar",
  "description": "A colored avatar component",
  "dependencies": [
    "hsl-to-hex"
  ],
  "devDependencies": [
    "@types/hsl-to-hex"
  ],
  "registryDependencies": [
    "avatar"
  ],
  "files": [
    {
      "path": "registry/colored-avatar/colored-avatar.tsx",
      "content": "'use client';\nimport hslToHex from 'hsl-to-hex';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\n\nexport interface AvatarInColorProps {\n  text?: string;\n  className?: string;\n}\n\n/**\n * 文字に基づいて一意の背景色を持つアバターを生成するコンポーネント。\n * クリックするとランダムな色に変わります。\n * @param text - アバターに表示する文字（通常はユーザー名の頭文字）\n * @param className - 追加のCSSクラス\n */\nexport function AvatarInColor({\n  text = '',\n  className = '',\n}: AvatarInColorProps) {\n  const [color, setColor] = useState<string>('#FFFFFF'); // 初期色は白\n\n  const saturationAndLuminosity: [number, number] = [85, 85];\n\n  const defineColorCode = useMemo(\n    () => ({\n      text: (char: string): number => {\n        if (!char) return Math.floor(Math.random() * 21);\n        // アルファベットの場合\n        if (/^[A-Za-z]/.test(char)) {\n          return Math.floor(\n            ((char.toUpperCase().charCodeAt(0) - 65) / (90 - 65)) * 20,\n          );\n        }\n        // その他の文字コードの場合\n        const baseCode = char.charCodeAt(0).toString();\n        const lastTwo = baseCode.slice(-2);\n        return Math.floor((Number(lastTwo) / 99) * 20);\n      },\n      random: (): number => Math.floor(Math.random() * 21),\n    }),\n    [],\n  );\n\n  // 色を計算して設定する関数\n  const calculateAndSetColor = (char?: string, isRandom = false) => {\n    const code = isRandom\n      ? defineColorCode.random()\n      : defineColorCode.text(char || '');\n    const newColor = hslToHex(code * 20, ...saturationAndLuminosity);\n    setColor(newColor);\n  };\n\n  // text propが変更された時に色を再計算\n  // biome-ignore lint/correctness/useExhaustiveDependencies: calculateAndSetColor is depended on defineColorCode\n  useEffect(() => {\n    calculateAndSetColor(text);\n  }, [text, defineColorCode]);\n\n  // アバタークリックで色をランダムに変更\n  const handleRandomColor = () => {\n    calculateAndSetColor(undefined, true);\n  };\n\n  return (\n    <Avatar\n      className={cn('size-10', className)}\n      onClick={handleRandomColor}\n      style={{ cursor: 'pointer' }}\n    >\n      <AvatarFallback\n        style={{\n          backgroundColor: color,\n          color: '#000',\n          fontWeight: 'bold',\n        }}\n      >\n        {text}\n      </AvatarFallback>\n    </Avatar>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}