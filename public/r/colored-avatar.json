{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "colored-avatar",
  "type": "registry:component",
  "title": "Colored Avatar",
  "description": "A colored avatar component",
  "dependencies": [
    "hsl-to-hex"
  ],
  "devDependencies": [
    "@types/hsl-to-hex"
  ],
  "registryDependencies": [
    "avatar"
  ],
  "files": [
    {
      "path": "registry/colored-avatar/colored-avatar.tsx",
      "content": "'use client';\r\nimport hslToHex from 'hsl-to-hex';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { cn } from '@/lib/utils';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\n\r\nexport interface AvatarInColorProps {\r\n  text?: string;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * 文字に基づいて一意の背景色を持つアバターを生成するコンポーネント。\r\n * クリックするとランダムな色に変わります。\r\n * @param text - アバターに表示する文字（通常はユーザー名の頭文字）\r\n * @param className - 追加のCSSクラス\r\n */\r\nexport function AvatarInColor({\r\n  text = '',\r\n  className = '',\r\n}: AvatarInColorProps) {\r\n  const [color, setColor] = useState<string>('#FFFFFF'); // 初期色は白\r\n\r\n  const saturationAndLuminosity: [number, number] = [85, 85];\r\n\r\n  const defineColorCode = useMemo(\r\n    () => ({\r\n      text: (char: string): number => {\r\n        if (!char) return Math.floor(Math.random() * 21);\r\n        // アルファベットの場合\r\n        if (/^[A-Za-z]/.test(char)) {\r\n          return Math.floor(\r\n            ((char.toUpperCase().charCodeAt(0) - 65) / (90 - 65)) * 20,\r\n          );\r\n        }\r\n        // その他の文字コードの場合\r\n        const baseCode = char.charCodeAt(0).toString();\r\n        const lastTwo = baseCode.slice(-2);\r\n        return Math.floor((Number(lastTwo) / 99) * 20);\r\n      },\r\n      random: (): number => Math.floor(Math.random() * 21),\r\n    }),\r\n    [],\r\n  );\r\n\r\n  // 色を計算して設定する関数\r\n  const calculateAndSetColor = (char?: string, isRandom = false) => {\r\n    const code = isRandom\r\n      ? defineColorCode.random()\r\n      : defineColorCode.text(char || '');\r\n    const newColor = hslToHex(code * 20, ...saturationAndLuminosity);\r\n    setColor(newColor);\r\n  };\r\n\r\n  // text propが変更された時に色を再計算\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: calculateAndSetColor is depended on defineColorCode\r\n  useEffect(() => {\r\n    calculateAndSetColor(text);\r\n  }, [text, defineColorCode]);\r\n\r\n  // アバタークリックで色をランダムに変更\r\n  const handleRandomColor = () => {\r\n    calculateAndSetColor(undefined, true);\r\n  };\r\n\r\n  return (\r\n    <Avatar\r\n      className={cn('size-10', className)}\r\n      onClick={handleRandomColor}\r\n      style={{ cursor: 'pointer' }}\r\n    >\r\n      <AvatarFallback\r\n        style={{\r\n          backgroundColor: color,\r\n          color: '#000',\r\n          fontWeight: 'bold',\r\n        }}\r\n      >\r\n        {text}\r\n      </AvatarFallback>\r\n    </Avatar>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}