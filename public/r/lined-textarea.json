{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "lined-textarea",
  "type": "registry:component",
  "title": "Lined Textarea",
  "description": "Textarea with lined numbers",
  "files": [
    {
      "path": "registry/lined-textarea/lined-textarea.tsx",
      "content": "// https://dev.to/phuocng/display-the-line-numbers-in-a-text-area-46mk\n'use client';\nimport type React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport function Textarea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'textarea'>) {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const linenumbersRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [textAreaStyles, setTextAreaStyles] = useState<React.CSSProperties>();\n\n  const parseValue = (v: string) =>\n    v.endsWith('px') ? parseInt(v.slice(0, -2), 10) : 0;\n\n  const calculateNumLines = (str: string) => {\n    if (!textAreaRef.current || !canvasRef.current) return 0;\n    const textareaStyles = window.getComputedStyle(textAreaRef.current);\n    const paddingLeft = parseValue(textareaStyles.paddingLeft);\n    const paddingRight = parseValue(textareaStyles.paddingRight);\n\n    const textareaWidth =\n      textAreaRef.current.getBoundingClientRect().width -\n      paddingLeft -\n      paddingRight;\n    const words = str.split(' ');\n    let lineCount = 0;\n    let currentLine = '';\n\n    const context = canvasRef.current.getContext('2d');\n    for (let i = 0; i < words.length; i++) {\n      const wordWidth = context?.measureText(`${words[i]} `).width ?? 0;\n      const lineWidth = context?.measureText(currentLine).width ?? 0;\n\n      if (lineWidth + wordWidth > textareaWidth) {\n        lineCount++;\n        currentLine = `${words[i]} `;\n      } else {\n        currentLine += `${words[i]} `;\n      }\n    }\n\n    if (currentLine.trim() !== '') {\n      lineCount++;\n    }\n\n    return lineCount;\n  };\n\n  const calculateLineNumbers = () => {\n    const lines = textAreaRef.current?.value.split('\\n') ?? [];\n    const numLines = lines.map((line) => calculateNumLines(line));\n\n    const lineNumbers = [];\n    let i = 1;\n    while (numLines.length > 0) {\n      const numLinesOfSentence = numLines.shift() ?? 0;\n      lineNumbers.push(i);\n      if (numLinesOfSentence > 1) {\n        Array(numLinesOfSentence - 1)\n          .fill('')\n          .forEach((_) => {\n            lineNumbers.push('');\n          });\n      }\n      i++;\n    }\n\n    return lineNumbers;\n  };\n\n  const displayLineNumbers = () => {\n    const lineNumbers = calculateLineNumbers();\n    if (linenumbersRef.current) {\n      linenumbersRef.current.innerHTML = Array.from(\n        {\n          length: lineNumbers.length,\n        },\n        (_, i) => `<div>${lineNumbers[i] || '&nbsp;'}</div>`,\n      ).join('');\n    }\n  };\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: first loading\n  useEffect(() => {\n    if (textAreaRef.current != null) {\n      const textareaStyles = window.getComputedStyle(textAreaRef.current);\n      const tempObject: Record<string, string | undefined> = {};\n      [\n        'fontFamily',\n        'fontSize',\n        'fontWeight',\n        'letterSpacing',\n        'lineHeight',\n        'padding',\n      ].forEach((property) => {\n        tempObject[property as string] =\n          (textareaStyles[property as keyof typeof textareaStyles] as string) ??\n          undefined;\n      });\n      setTextAreaStyles(tempObject);\n\n      const font = `${textareaStyles.fontSize} ${textareaStyles.fontFamily}`;\n      const context = canvasRef.current?.getContext('2d');\n      if (context) context.font = font;\n\n      const ro = new ResizeObserver(() => {\n        const rect = textAreaRef.current?.getBoundingClientRect();\n        if (linenumbersRef.current)\n          linenumbersRef.current.style.height = `${rect?.height ?? 0}px`;\n        displayLineNumbers();\n      });\n      ro.observe(textAreaRef.current);\n    }\n  }, []);\n\n  return (\n    <div className=\"flex border border-solid border-gray-900 dark:border-gray-100 rounded-lg box-border\">\n      <div\n        ref={linenumbersRef}\n        style={textAreaStyles}\n        className=\"border-gray-800 dark:border-gray-200 text-end overflow-hidden\"\n      />\n      <textarea\n        ref={textAreaRef}\n        className={cn('border-none outline-none p-2 w-[100%]', className)}\n        onInput={() => displayLineNumbers()}\n        onScroll={() => {\n          if (linenumbersRef.current)\n            linenumbersRef.current.scrollTop =\n              textAreaRef.current?.scrollTop ?? 0;\n        }}\n        {...props}\n      >\n        {children}\n      </textarea>\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}